[
  {
    "objectID": "skill_gap_analysis.html",
    "href": "skill_gap_analysis.html",
    "title": "Skill Gap Analysis",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"vscode\"\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import split, explode, col, regexp_replace, transform, isnan\n\nspark = SparkSession.builder.appName(\"LightcastCleanedData\").getOrCreate()\n\n# reload cleaned data\ndf_cleaned = spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"multiLine\",\"true\").csv(\"data/lightcast_cleaned.csv\")\n\n# show dataset\ndf_cleaned.show()"
  },
  {
    "objectID": "skill_gap_analysis.html#creating-a-team-based-skills-data-framework",
    "href": "skill_gap_analysis.html#creating-a-team-based-skills-data-framework",
    "title": "Skill Gap Analysis",
    "section": "1 Creating a team-based skills data framework",
    "text": "1 Creating a team-based skills data framework\nWe take a column of software skill names from the cleaned dataset, splits each entry, cleans up the text, and counts how often each skill appears. Then, we grabs the top 30 most frequent skills, and puts them into a tidy table using pandas to make it easier to view.\n\n\nCode\nfrom collections import Counter\nimport pandas as pd\n\n# 1. Extracting data with .collect()\nskills_rows = df_cleaned.select(\"SOFTWARE_SKILLS_NAME\").dropna().collect()\n\n# 2. Split each line of string into a list of skills and expand the statistics\nall_skills = []\nfor row in skills_rows:\n    skills = row[\"SOFTWARE_SKILLS_NAME\"] \n    if isinstance(skills, str):  \n        skill_list = [s.strip() for s in skills.split(\",\")]  # Split and remove spaces\n        all_skills.extend(skill_list)\n\n# 3. Counting word frequency\nskill_counts = Counter(all_skills)\ntop_skills = skill_counts.most_common(30) \n\n# 4. Change to dataframe and show\ndf_skill_counts = pd.DataFrame(top_skills, columns=[\"Skill\", \"Frequency\"])\n#print(df_skill_counts)\n\n\nWe build a table showing the skill levels of our team members across various tools like SQL, Excel, Python, and others. Then we create a heatmap to visually highlight each person’s strengths and weaknesses, making it easy to compare skill levels across the team.\n\n\nCode\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# 1. Construct team skill level data\nskills_data = {\n    \"Name\": [\"Yuxuan Chen\", \"Shangxuan Zhong\", \"Qimin Shen\", \"Altyn Baigaliyeva\"],\n    \"SQL\": [5, 4, 4, 2],\n    \"Excel\": [4, 4, 5, 3],\n    \"Python\": [3, 4, 4, 2],\n    \"SAP Applications\": [2, 2, 3, 1],\n    \"Dashboard\": [2, 2, 3, 1],\n    \"Tableau\": [2, 2, 3, 1],\n    \"PowerBI\": [2, 2, 3, 1],\n    \"PowerPoint\": [2, 4, 3, 1],\n    \"R\": [2, 4, 3, 1],\n    \"Azure\": [2, 2, 3, 1],\n    \"Amazon Web Services\": [2, 2, 3, 1]\n}\n\n# 2. Create dataframe and set Name as index\ndf_skills = pd.DataFrame(skills_data)\ndf_skills.set_index(\"Name\", inplace=True)\n\n# 3. Demonstrate the skill level chart\n#print(\"Team Skill Rating Scale:\")\n#display(df_skills) \n\n# 4. Visualize the skills gap by heat map\nplt.figure(figsize=(8, 6))\nsns.heatmap(df_skills, annot=True, cmap=\"coolwarm\", linewidths=0.5, cbar_kws={'label': 'Skill Level'})\nplt.title(\"Team Skill Levels Heatmap\")\nplt.xticks(rotation=45)  \nplt.yticks(rotation=0)\nplt.tight_layout()\nplt.savefig(\"images/Skill_Level.png\", dpi=300)\nplt.show()\n\n\n 缺少解释 这个我就先不解释了，等大家数据更新完重新画了再解释，我把我数据改了"
  },
  {
    "objectID": "skill_gap_analysis.html#compare-team-skills-to-industry-requirements",
    "href": "skill_gap_analysis.html#compare-team-skills-to-industry-requirements",
    "title": "Skill Gap Analysis",
    "section": "2 Compare team skills to industry requirements",
    "text": "2 Compare team skills to industry requirements\nWe add a new column EDU_MATCH to the dataset to check if each person’s actual education level matches the minimum education requirement. If they match, it labels the row as “Match”; otherwise, it marks it as “Mismatch.” This makes it easy to see who meets the education criteria and who doesn’t.\n\n\nCode\nfrom pyspark.sql.functions import col, when\n\n# Create a new column EDU_MATCH, mark it as a match or not\ndf_compare = df_cleaned.withColumn(\n    \"EDU_MATCH\",\n    when(col(\"MIN_EDULEVELS\") == col(\"EDUCATION_LEVELS\"), \"Match\").otherwise(\"Mismatch\")\n)\n\n#df_compare.select(\"MIN_EDULEVELS\", \"EDUCATION_LEVELS\", \"EDU_MATCH\").show(truncate=False)\n\n# 统计不匹配的行数\n#unmatched_count = df_cleaned.filter(col(\"MIN_EDULEVELS\") != col(\"EDUCATION_LEVELS\")).count()\n#print(f\"Not Match：{unmatched_count}\")\n\n# 说明EDUCATION_LEVELS和MIN_EDULEVELS一样，但是这个检验的代码还是留着吧\n\n\nThen we create a reference table that links each unique minimum education level required for a job to a corresponding score. It assigns higher scores to higher education levels, for example, a Ph.D. gets a 5, a Master’s a 4, and so on, down to 0 for jobs that list no education requirement. And we think this scoring helps quantify and compare job expectations based on the level of education required.\n\n\nCode\nfrom pyspark.sql.functions import when, lit, col, trim\n# Score table\njob_expectation = df_cleaned.select(\n    col(\"MIN_EDULEVELS\").alias(\"EDU_LEVEL\"),\n    col(\"MIN_EDULEVELS_NAME\").alias(\"EDU_LEVELS_NAME\")\n).distinct().orderBy(col(\"EDU_LEVEL\").asc())\n\njob_expectation = job_expectation.withColumn(\n    \"SCORE\",\n    when(col(\"EDU_LEVEL\") == 4, lit(5)) # Ph.D. or professional degree\n    .when(col(\"EDU_LEVEL\") == 3, lit(4)) # Master's degree\n    .when(col(\"EDU_LEVEL\") == 2, lit(3)) # Bachelor's degree \n    .when(col(\"EDU_LEVEL\") == 1, lit(2)) # Associate degree\n    .when(col(\"EDU_LEVEL\") == 0, lit(1)) # High school or GED\n    .when(col(\"EDU_LEVEL\") == 99, lit(0)) # No Education Listed\n)\n\njob_expectation.show(truncate=False)\n\n\n\n\n\nJob Expectation\n\n\nWe analyze how often each software skill appears in job listings, categorized by the required education level (which we previously converted into scores). First, we join the education score to each job, split the combined skill strings into individual skills, and count how frequently each skill appears at each education score level. Second, we reshape the data so that each skill shows the number of times it appears across all score levels. Finally, we identify the most common score for each skill. If multiple scores tie for the highest count, we will select the lowest one among them—resulting in a “Proficiency_Levels” value that reflects the typical education requirement associated with that skill in the job market.\n\n\nCode\nfrom pyspark.sql.functions import count, array, struct, sort_array, expr, size, element_at, col, lit, greatest, when\n\n# 1. Export the data \ndf_with_score = df_cleaned.join(\n    job_expectation.select(\"EDU_LEVEL\", \"SCORE\"),\n    df_cleaned[\"MIN_EDULEVELS\"] == job_expectation[\"EDU_LEVEL\"],\n    how=\"left\"\n)\ndf_with_skills = df_with_score.withColumn(\"Skill\", split(col(\"SOFTWARE_SKILLS_NAME\"), \",\"))\ndf_exploded = df_with_skills.select(explode(\"Skill\").alias(\"Skill\"), col(\"SCORE\"))\ndf_exploded = df_exploded.withColumn(\"Skill\", trim(col(\"Skill\")))\n\n# 2. Frequency Statistics by Skill and SCORE\nskill_score_counts = df_exploded.groupBy(\"Skill\", \"SCORE\").agg(count(\"*\").alias(\"count\"))\n\n# 3 Expand pivot to column\nfrom pyspark.sql.functions import sum as _sum\n\nskill_score_pivot = skill_score_counts.groupBy(\"Skill\") \\\n    .pivot(\"SCORE\", [5, 4, 3, 2, 1, 0]) \\\n    .agg(_sum(\"count\")) \\\n    .na.fill(0) \n\n# 4. Arrays and filters are used to process tied maxima and find the middle score\nscore_structs = array(\n    struct(lit(5).alias(\"score\"), col(\"5\").alias(\"cnt\")),\n    struct(lit(4).alias(\"score\"), col(\"4\").alias(\"cnt\")),\n    struct(lit(3).alias(\"score\"), col(\"3\").alias(\"cnt\")),\n    struct(lit(2).alias(\"score\"), col(\"2\").alias(\"cnt\")),\n    struct(lit(1).alias(\"score\"), col(\"1\").alias(\"cnt\")),\n    struct(lit(0).alias(\"score\"), col(\"0\").alias(\"cnt\"))\n)\n\nskill_score_labeled = skill_score_pivot.withColumn(\"score_array\", score_structs) \\\n    .withColumn(\"max_count\", greatest(col(\"5\"), col(\"4\"), col(\"3\"), col(\"2\"), col(\"1\"), col(\"0\"))) \\\n    .withColumn(\"filtered\", expr(\"filter(score_array, x -&gt; x.cnt = max_count)\")) \\\n    .withColumn(\"Proficiency_Levels\", expr(\"aggregate(filtered, -1, (acc, x) -&gt; IF(acc = -1 OR x.score &lt; acc, x.score, acc))\"))\n\n# Step 5: 显示最终结果\n#skill_score_labeled.select(\"Skill\", \"5\", \"4\", \"3\", \"2\", \"1\", \"0\", \"Proficiency_Levels\").orderBy(\"Proficiency_Levels\", ascending=False).show(truncate=False)\n\n\nHere we focus on a specific set of software skills that are relevant to our analysis. First, we define a list of target skills we’re interested in, such as SQL, Excel, Python, Tableau, and others. Then, we filter our previously processed skill data to only include these selected skills, keeping just the skill names and their associated “Proficiency_Levels”. Finally, we sort the result alphabetically by skill name to make it easier to review and compare.\n\n\nCode\nfrom pyspark.sql.functions import lit\n\n# 1. Define a list of target skills\ntarget_skills = [\n    \"SQL(ProgrammingLanguage)\", \"MicrosoftExcel\", \"Python(ProgrammingLanguage)\",\n    \"SAPApplications\", \"Dashboard\", \"Tableau(BusinessIntelligenceSoftware)\",\n    \"PowerBI\", \"MicrosoftPowerPoint\", \"R(ProgrammingLanguage)\",\n    \"MicrosoftAzure\", \"AmazonWebServices\"\n]\n\n# 2. Filter target skills from skill_score_labeled\nfiltered_skills = skill_score_labeled.filter(col(\"Skill\").isin(target_skills)) \\\n    .select(\"Skill\", \"Proficiency_Levels\") \\\n    .orderBy(\"Skill\")\n\n# 3. Show results\nfiltered_skills.show(truncate=False)\n\n\n\n\n\nFiltered Skills\n\n\nNow we are able to evaluate how well our team’s skill levels match up with job market expectations. First, we collect the proficiency scores for a set of target skills from our previous results. Then, we rename the skill labels into a more readable and consistent format for easier comparison. Next, we calculate the skill gap for each team member by subtracting the job-required score from their actual skill level. Here, positive values mean the team exceeds the requirement, while negative values show areas for improvement. Finally, we visualize these gaps using a heatmap, making it easy to spot which skills are strong and which need development across the team.\n\n\nCode\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 1. Build a dictionary of required_levels from filtered_skills with collect\nrows = filtered_skills.collect()\n\n# 2. Mapping skill names to a consistent form used by the team\nskill_name_map = {\n    \"SQL(ProgrammingLanguage)\": \"SQL\",\n    \"MicrosoftExcel\": \"Excel\",\n    \"Python(ProgrammingLanguage)\": \"Python\",\n    \"SAPApplications\": \"SAP Applications\",\n    \"Dashboard\": \"Dashboard\",\n    \"Tableau(BusinessIntelligenceSoftware)\": \"Tableau\",\n    \"PowerBI\": \"PowerBI\",\n    \"MicrosoftPowerPoint\": \"PowerPoint\",\n    \"R(ProgrammingLanguage)\": \"R\",\n    \"MicrosoftAzure\": \"Azure\",\n    \"AmazonWebServices\": \"Amazon Web Services\"\n}\n\n# 3. Construction of required_levels\nrequired_levels = {\n    skill_name_map.get(row[\"Skill\"], row[\"Skill\"]): row[\"Proficiency_Levels\"]\n    for row in rows\n}\n\n# 4. Calculation of gaps (team skills - job requirements)\ndf_gap = df_skills.copy()\nfor skill in df_gap.columns:\n    required = required_levels.get(skill, 0)\n    df_gap[skill] = df_gap[skill] - required\n\n# 5. Show result with heat map\nplt.figure(figsize=(10, 6))\nsns.heatmap(\n    df_gap,\n    annot=True,\n    cmap=sns.diverging_palette(10, 130, s=90, l=50, as_cmap=True),  \n    # red = insufficient, green = exceeding\n    center=0,\n    linewidths=0.5,\n    cbar_kws={'label': 'Skill Surplus (Team - Required)'}\n)\nplt.title(\"Team vs Job Skill Requirements (Heatmap)\")\nplt.xticks(rotation=45)\nplt.yticks(rotation=0)\nplt.tight_layout()\nplt.savefig(\"images/Gaps_Between.png\", dpi=300)\nplt.show()\n\n\n 缺少解释"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"vscode\"\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import split, explode, col, regexp_replace, transform, isnan\n\nspark = SparkSession.builder.appName(\"LightcastCleanedData\").getOrCreate()\n\n# reload cleaned data\ndf_cleaned = spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"multiLine\",\"true\").csv(\"data/lightcast_cleaned.csv\")\n\n# show dataset\ndf_cleaned.show()"
  },
  {
    "objectID": "eda.html#comparison-of-salary-between-remote-and-on-site-work-box-chart",
    "href": "eda.html#comparison-of-salary-between-remote-and-on-site-work-box-chart",
    "title": "Exploratory Data Analysis",
    "section": "1. Comparison of salary between remote and on-site work (box chart)",
    "text": "1. Comparison of salary between remote and on-site work (box chart)\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\n# Collecting data with .collect()\ndata = df_cleaned.select(\"REMOTE_TYPE_NAME\", \"SALARY\").collect()\n\n# Converting data into a format suitable for plotting (e.g., a list)\ndata_list = [(row[\"REMOTE_TYPE_NAME\"], row[\"SALARY\"]) for row in data]\n\n# Create Pandas DataFrame\nimport pandas as pd\ndf_pandas = pd.DataFrame(data_list, columns=[\"REMOTE_TYPE_NAME\", \"SALARY\"])\n\nfig = px.box(df_pandas, x=\"REMOTE_TYPE_NAME\", y=\"SALARY\",\n             title=\"Salary Comparison: Remote vs. On-Site Jobs\",\n             category_orders={\"REMOTE_TYPE_NAME\": [\"On-Site\", \"Hybrid\", \"Remote\"]},\n             labels={\"REMOTE_TYPE_NAME\": \"Job Type\", \"SALARY\": \"Salary ($)\"})\n\nfig.write_image(\"./images/REMOTE_TYPE_NAME&SALARY.png\")  ##save the pic\n\nfig.show()\n\n\n\n\n\nSalary of different remote type\n\n\n\nAnalysis\nThis box plot titled “Salary Comparison: Remote vs. On-Site Jobs” shows the salary distribution across three job types: On-Site, Hybrid, and Remote. Overall, the median salaries are relatively similar, with Remote roles showing a slightly higher median than the others. On-Site positions have the widest salary range and the highest number of extreme outliers, indicating greater variability in pay. Hybrid roles display a more compact distribution, while Remote jobs also include several high-salary outliers, suggesting they can be competitively compensated. This suggests that Remote and Hybrid positions are not at a financial disadvantage and may even offer slightly better pay in some cases."
  },
  {
    "objectID": "eda.html#salary-by-region-map",
    "href": "eda.html#salary-by-region-map",
    "title": "Exploratory Data Analysis",
    "section": "2. Salary by region (map)",
    "text": "2. Salary by region (map)\n\n\nCode\n# STATE_NAME change to .abbr\nimport us\n\n# Collecting data with .collect()\ndata = df_cleaned.select(\"STATE_NAME\", \"SALARY\").collect()\n\n# Converting data into a format suitable for plotting (e.g., a list)\ndata_list = [(row[\"STATE_NAME\"], row[\"SALARY\"]) for row in data]\n\n# Create Pandas DataFrame\nimport pandas as pd\ndf_pandas = pd.DataFrame(data_list, columns=[\"STATE_NAME\", \"SALARY\"])\n\ndf_pandas[\"STATE_NAME\"] = df_pandas[\"STATE_NAME\"].apply(\n    lambda x: us.states.lookup(x).abbr if pd.notna(x) and us.states.lookup(x) else x\n)\n\n# Verify conversion\n\nimport plotly.express as px\n\nfig = px.choropleth(df_pandas, \n                    locations=\"STATE_NAME\", \n                    locationmode=\"USA-states\",\n                    color=\"SALARY\", \n                    hover_name=\"STATE_NAME\",\n                    scope=\"usa\", \n                    title=\"Average Salary by State\",\n                    color_continuous_scale=\"Viridis\",\n                    labels={\"SALARY\": \"Average Salary ($)\"})\n\nfig.write_image(\"./images/STATE_NAME&SALARY.png\")  ##save the pic\n\nfig.show()\n\n\n\n\n\nSalary of different states\n\n\n\nAnalysis\nThe map titled “Average Salary by State” shows clear differences in average salaries across the U.S., with brighter colors indicating higher salaries. States like California, Washington, and Colorado stand out with higher average salaries, likely due to strong tech industries and higher living costs. In contrast, southern states such as Mississippi and Alabama appear in darker shades, reflecting lower average pay. Northeastern states like New Jersey and Massachusetts also show relatively high salaries, which aligns with their concentration of finance, healthcare, and education sectors. Overall, the map provides a clear and human-readable visualization of how location influences earning potential across the country."
  },
  {
    "objectID": "eda.html#the-highest-paying-job",
    "href": "eda.html#the-highest-paying-job",
    "title": "Exploratory Data Analysis",
    "section": "3. The highest paying job",
    "text": "3. The highest paying job\n\n\nCode\n# Collecting data with .collect()\ndata = df_cleaned.select(\"LIGHTCAST_SECTORS_NAME\", \"SALARY\").collect()\n\n# Converting data into a format suitable for plotting (e.g., a list)\ndata_list = [(row[\"LIGHTCAST_SECTORS_NAME\"], row[\"SALARY\"]) for row in data]\n\n# Create Pandas DataFrame\nimport pandas as pd\ndf_pandas = pd.DataFrame(data_list, columns=[\"LIGHTCAST_SECTORS_NAME\", \"SALARY\"])\n\nfig = px.bar(df_pandas.groupby(\"LIGHTCAST_SECTORS_NAME\")[\"SALARY\"].mean().sort_values(ascending=False).head(10),\n             title=\"Top 10 Industries with Highest Salaries\",\n             labels={\"LIGHTCAST_SECTORS_NAME\": \"Industry\", \"SALARY\": \"Salary ($)\"})\n\nfig.write_image(\"./images/LIGHTCAST_SECTORS_NAME&SALARY.png\")  ##save the pic\n\nfig.show()\n\n\n\n\n\nSalary of top 10 industries\n\n\n\nAnalysis\nThis bar chart titled “Top 10 Industries with Highest Salaries” highlights the most lucrative sectors based on average salary. The top-paying industries are heavily concentrated in Cybersecurity, Artificial Intelligence, Data Privacy/Protection, and Green Jobs, often appearing in overlapping combinations such as “GreenJobs:Enabled, Cybersecurity” or “Cybersecurity, DataPrivacy/Protection”. These sectors consistently show average salaries above $140,000, with some nearing $155,000. The dominance of tech-driven and security-related fields in the top ranks reflects the high demand for specialized talent in emerging technologies and the growing importance of data protection and sustainability initiatives."
  },
  {
    "objectID": "eda.html#salary-comparison-between-ai-and-non-ai-positions",
    "href": "eda.html#salary-comparison-between-ai-and-non-ai-positions",
    "title": "Exploratory Data Analysis",
    "section": "4. Salary comparison between AI and non-AI positions",
    "text": "4. Salary comparison between AI and non-AI positions\n\n\nCode\nimport plotly.express as px\n\n# Define AI-related keywords based on LIGHTCAST_SECTORS_NAME\nai_keywords = [\n    \"Artificial Intelligence\", \"Machine Learning\", \"Data Science\",\n    \"Cybersecurity\", \"Computational Science\", \"Deep Learning\",\n    \"Data Privacy\", \"Computer Vision\", \"Natural Language Processing\",\n    \"Big Data\", \"Cloud Computing\", \"Quantum Computing\", \"Robotics\"\n]\n\n# Collecting data with .collect()\ndata = df_cleaned.select(\"LIGHTCAST_SECTORS_NAME\", \"SALARY\").collect()\n\n# Converting data into a format suitable for plotting (e.g., a list)\ndata_list = [(row[\"LIGHTCAST_SECTORS_NAME\"], row[\"SALARY\"]) for row in data]\n\n# Create Pandas DataFrame\nimport pandas as pd\ndf_pandas = pd.DataFrame(data_list, columns=[\"LIGHTCAST_SECTORS_NAME\", \"SALARY\"])\n\n#Classify AI-related vs. Non-AI industries\ndf_pandas[\"AI_RELATED\"] = df_pandas[\"LIGHTCAST_SECTORS_NAME\"].apply(\n    lambda x: \"AI-related\" if any(keyword in str(x) for keyword in ai_keywords) else \"Non-AI\"\n)\n\n# Show counts of AI vs. Non-AI jobs\nprint(df_pandas[\"AI_RELATED\"].value_counts())\n\n\nfig = px.box(df_pandas, x=\"AI_RELATED\", y=\"SALARY\",\n             title=\"AI-related vs. Non-AI Industries Salary Comparison\",\n             labels={\"AI_RELATED\": \"Industry Type\", \"SALARY\": \"Salary ($)\"},\n             color=\"AI_RELATED\")\n\nfig.write_image(\"./images/AI_RELATED&SALARY.png\")  ##save the pic\n\nfig.show()\n\n\n\n\n\nSalary of AI related\n\n\n\nAnalysis\nThis boxplot reveals that AI-related industries generally offer higher median salaries compared to non-AI sectors. The interquartile range for AI-related positions is positioned higher on the salary scale and appears slightly wider, suggesting greater variability in mid-range compensation. While non-AI fields show more extreme outliers at the upper end (several blue dots above $400k), AI-related roles display a higher concentration of salaries within the $100k-$200k range, with fewer but still notable outliers. The minimum salary for AI-related positions also appears higher than for non-AI jobs, indicating better entry-level compensation. This visualization confirms the financial premium typically associated with AI expertise, though exceptional compensation exists in both categories."
  },
  {
    "objectID": "index.html#data-analysis",
    "href": "index.html#data-analysis",
    "title": "Group 6    Job Market Analysis – 2024",
    "section": "Data Analysis",
    "text": "Data Analysis"
  },
  {
    "objectID": "index.html#career-strategy",
    "href": "index.html#career-strategy",
    "title": "Group 6    Job Market Analysis – 2024",
    "section": "Career Strategy",
    "text": "Career Strategy"
  },
  {
    "objectID": "research_introduction.html",
    "href": "research_introduction.html",
    "title": "Research Introduction",
    "section": "",
    "text": "The field of data science continues to be one of the most lucrative and dynamic career paths in 2024. As businesses increasingly rely on data-driven decision-making, the demand for skilled data scientists has grown across industries, including technology, finance, healthcare, and e-commerce. However, salary trends in data science are influenced by a variety of factors, such as emerging technologies, economic conditions, geographic location, and skill specialization. This research aims to analyze salary patterns in data science in 2024, providing insights into compensation disparities and growth opportunities within the industry.\nSeveral key trends make this topic particularly relevant in 2024:\n\nAI and Automation Influence: The rapid advancement of AI and automation tools has shifted the skill demands in data science, leading to changes in salary structures for specialized roles such as AI engineers and machine learning researchers.\nRemote Work and Globalization: The continued rise of remote work has impacted salary expectations, with companies hiring from a broader talent pool across different geographical regions, leading to potential salary standardization or disparities.\nEconomic Factors: Economic conditions, including inflation and recession fears, have influenced hiring trends and salary negotiations in the tech sector, causing fluctuations in compensation levels.\nExperience and Specialization Impact: Salaries in data science vary significantly based on experience level and specialization ( deep learning, big data analytics, or cloud computing). Understanding these variations helps professionals navigate career growth strategies.\nIndustry-Specific Variations: Different industries offer varying compensation packages for data science roles, with sectors such as finance and healthcare often providing higher salaries compared to non-tech industries."
  },
  {
    "objectID": "research_introduction.html#salary-trends-in-data-science-2024",
    "href": "research_introduction.html#salary-trends-in-data-science-2024",
    "title": "Research Introduction",
    "section": "",
    "text": "The field of data science continues to be one of the most lucrative and dynamic career paths in 2024. As businesses increasingly rely on data-driven decision-making, the demand for skilled data scientists has grown across industries, including technology, finance, healthcare, and e-commerce. However, salary trends in data science are influenced by a variety of factors, such as emerging technologies, economic conditions, geographic location, and skill specialization. This research aims to analyze salary patterns in data science in 2024, providing insights into compensation disparities and growth opportunities within the industry.\nSeveral key trends make this topic particularly relevant in 2024:\n\nAI and Automation Influence: The rapid advancement of AI and automation tools has shifted the skill demands in data science, leading to changes in salary structures for specialized roles such as AI engineers and machine learning researchers.\nRemote Work and Globalization: The continued rise of remote work has impacted salary expectations, with companies hiring from a broader talent pool across different geographical regions, leading to potential salary standardization or disparities.\nEconomic Factors: Economic conditions, including inflation and recession fears, have influenced hiring trends and salary negotiations in the tech sector, causing fluctuations in compensation levels.\nExperience and Specialization Impact: Salaries in data science vary significantly based on experience level and specialization ( deep learning, big data analytics, or cloud computing). Understanding these variations helps professionals navigate career growth strategies.\nIndustry-Specific Variations: Different industries offer varying compensation packages for data science roles, with sectors such as finance and healthcare often providing higher salaries compared to non-tech industries."
  },
  {
    "objectID": "research_introduction.html#expected-findings",
    "href": "research_introduction.html#expected-findings",
    "title": "Research Introduction",
    "section": "Expected Findings",
    "text": "Expected Findings\nThrough this research, we anticipate identifying key patterns in data science salaries, such as:\n\nAn increase in salaries for AI and machine learning specialists due to growing demand.\nPotential stagnation or decline in entry-level data science salaries due to an influx of new professionals entering the field.\nA widening salary gap between regions due to remote work policies and cost-of-living differences.\nIndustry-specific salary trends, where certain sectors may offer higher compensation based on their reliance on data-driven insights."
  },
  {
    "objectID": "data_cleaning.html",
    "href": "data_cleaning.html",
    "title": "Data Cleaning & Exploration",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = \"vscode\"\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import split, explode, col, regexp_replace, transform, isnan\n\nspark = SparkSession.builder.appName(\"LightcastData\").getOrCreate()\n\n# Load Data\ndf = spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").option(\"multiLine\",\"true\").option(\"escape\", \"\\\"\").csv(\"./data/lightcast_job_postings.csv\")\n\ndf.show(5)\n\n\n\n\nCalculates the duration of each job posting by finding the difference between its expiration and posted dates. Converts the POSTED and EXPIRED columns from string to date format. Update DURATION if it is null with the number of days between EXPIRED and POSTED, otherwise, the existing value is kept.\n\n\nCode\n# 1.DURATION = EXPIRED - POSTED\n\nspark.conf.set(\"spark.sql.legacy.timeParserPolicy\", \"LEGACY\")\n\nfrom pyspark.sql.functions import datediff, when, to_date, col\n\ndf = df.withColumn(\"POSTED\", to_date(\"POSTED\", \"MM/dd/yyyy\")) \\\n       .withColumn(\"EXPIRED\", to_date(\"EXPIRED\", \"MM/dd/yyyy\"))\n\ndf = df.withColumn(\n    \"DURATION\",\n    when(col(\"DURATION\").isNull(), datediff(\"EXPIRED\", \"POSTED\"))\n    .otherwise(col(\"DURATION\"))\n)\n\n\n\n\n\nCleans up multiple text columns in the DataFrame by extracting and formatting the content originally enclosed in double quotes. Columns to clean contain those string values often wrapped in brackets, double quotes, or cluttered with newlines and extra spaces. For each of these columns, using regular expressions to remove square brackets, line breaks, and excess whitespace, formats comma-separated items with a proper space after each comma, and removes all double quotes, resulting in cleaner, more readable text entries across the specified columns.\n\n\nCode\n# 2. Remove square brackets, line breaks, spaces, and replace the formatting between commas with “,”, then remove the double quotes\n\nfrom pyspark.sql.functions import regexp_replace, col\n\ncolumns_to_clean = [\"SOURCE_TYPES\", \"SOURCES\", \"URL\", \"EDUCATION_LEVELS_NAME\", \"SKILLS\", \n                    \"SKILLS_NAME\", \"SPECIALIZED_SKILLS\", \"SPECIALIZED_SKILLS_NAME\", \"CERTIFICATIONS\", \n                    \"CERTIFICATIONS_NAME\", \"COMMON_SKILLS\", \"COMMON_SKILLS_NAME\", \"SOFTWARE_SKILLS\", \n                    \"SOFTWARE_SKILLS_NAME\", \"CIP6\", \"CIP6_NAME\", \"CIP4\", \"CIP4_NAME\", \"CIP2\", \n                    \"CIP2_NAME\", \"LIGHTCAST_SECTORS\", \"LIGHTCAST_SECTORS_NAME\"]  \n\nfor col_name in columns_to_clean:\n    df = df.withColumn(col_name, \n                       regexp_replace(regexp_replace(regexp_replace(col(col_name), r'[\\[\\]\\n\\s]+', ''), r'\",\"', '\", '), r'\"', ''))\n\n\n\n\n\nCleans the EDUCATION_LEVELS column by extracting and retaining only the numeric portion of each entry. Removing surrounding text or symbols, leaving just the numeric education level in the column. This makes the data more consistent and easier to work with for analysis or modeling purposes.\n\n\nCode\n# 3.EDUCATION_LEVELS only keeps digits\nfrom pyspark.sql.functions import regexp_extract\n\ndf = df.withColumn(\"EDUCATION_LEVELS\", regexp_extract(\"EDUCATION_LEVELS\", r'(\\d+)', 1))\n\n\n\n\n\nCleans the LOCATION column, ensures that all location information appears on one line, and removes curly braces, resulting a cleaner, more uniform LOCATION column for reading and analyzing\n\n\nCode\n# 4. LOCATION only keeps data\nfrom pyspark.sql.functions import col, regexp_replace\n\ndf = df.withColumn(\"LOCATION\", \n                           regexp_replace(regexp_replace(col(\"LOCATION\"), r\"\\s*\\n\\s*\", \" \"), r\"[{}]\", \"\"))\n\n\n\n\n\nSimilarly as in updating duration, fills in the value with the number of days between MODELED_EXPIRED and POSTED, helps standardize and complete the duration data for modeled job postings\n\n\nCode\n# 5.MODELED_DURATION = MODELED_EXPIRED - POSTED\n\nspark.conf.set(\"spark.sql.legacy.timeParserPolicy\", \"LEGACY\")\n\nfrom pyspark.sql.functions import datediff, when, to_date, col\n\ndf = df.withColumn(\"MODELED_EXPIRED\", to_date(\"MODELED_EXPIRED\", \"MM/dd/yyyy\"))\n\ndf = df.withColumn(\n    \"MODELED_DURATION\",\n    when(col(\"MODELED_DURATION\").isNull(), datediff(\"MODELED_EXPIRED\", \"POSTED\"))\n    .otherwise(col(\"MODELED_DURATION\"))\n)\n\n\n\n\n\nStandardizes the values in the REMOTE_TYPE_NAME column to ensure consistency in describing remote work types. Replaces values None and Not Remote with On-Site, changes Hybrid Remote to Hybrid, and keeps Remote as is. Simplify and unify the classification of job postings based on work location\n\n\nCode\n# 6. Standardize Remote Work Types\nfrom pyspark.sql.functions import when, col\n\ndf = df.withColumn(\n    \"REMOTE_TYPE_NAME\",\n    when(col(\"REMOTE_TYPE_NAME\") == \"[None]\", \"On-Site\")\n    .when(col(\"REMOTE_TYPE_NAME\") == \"Not Remote\", \"On-Site\")\n    .when(col(\"REMOTE_TYPE_NAME\") == \"Hybrid Remote\", \"Hybrid\")\n    .when(col(\"REMOTE_TYPE_NAME\") == \"Remote\", \"Remote\")\n    .otherwise(col(\"REMOTE_TYPE_NAME\"))\n)\n\n\n\n\n\nAlthough filling missing values is a common data cleaning strategy, we chose not to do it in this case to preserve the integrity and accuracy of the original dataset. Imputing numerical fields like salary with the median could distort salary distributions and mask meaningful patterns or outliers. Similarly, replacing missing categorical fields with “Unknown” may introduce noise and reduce the reliability of downstream analysis, especially in modeling or clustering tasks. Additionally, dropping columns with over 50% missing data might lead to the loss of potentially valuable or unique information. By keeping the missing values intact, we allow for more transparent analysis and leave room for context-aware handling in specific use cases.\n\n\n\nThe dataset is overly complex, with more than 100 different variables and columns. Therefore, we have taken the approach of directly extracting a specific column or columns of the data to be analyzed to generate a dataframe and analyze it. This way we don’t need to remove unwanted columns.\n\n\n\n\n\nCode\n# save data\n# 1. use coalesce(1) to merge all partitions into one file\ndf.coalesce(1).write.option(\"header\", \"true\").csv(\"data/lightcast_cleaned_temp\")\n\n# 2. Find and rename the generated files\nimport os\nimport shutil\n\n# get path\ngenerated_file_path = 'data/lightcast_cleaned_temp'\n\nfor filename in os.listdir(generated_file_path):\n    if filename.startswith('part-'):  # find file\n        # rename and move\n        shutil.move(os.path.join(generated_file_path, filename), 'data/lightcast_cleaned.csv')\n\n# delete useless folder\nshutil.rmtree(generated_file_path)"
  },
  {
    "objectID": "data_cleaning.html#update-duration",
    "href": "data_cleaning.html#update-duration",
    "title": "Data Cleaning & Exploration",
    "section": "",
    "text": "Calculates the duration of each job posting by finding the difference between its expiration and posted dates. Converts the POSTED and EXPIRED columns from string to date format. Update DURATION if it is null with the number of days between EXPIRED and POSTED, otherwise, the existing value is kept.\n\n\nCode\n# 1.DURATION = EXPIRED - POSTED\n\nspark.conf.set(\"spark.sql.legacy.timeParserPolicy\", \"LEGACY\")\n\nfrom pyspark.sql.functions import datediff, when, to_date, col\n\ndf = df.withColumn(\"POSTED\", to_date(\"POSTED\", \"MM/dd/yyyy\")) \\\n       .withColumn(\"EXPIRED\", to_date(\"EXPIRED\", \"MM/dd/yyyy\"))\n\ndf = df.withColumn(\n    \"DURATION\",\n    when(col(\"DURATION\").isNull(), datediff(\"EXPIRED\", \"POSTED\"))\n    .otherwise(col(\"DURATION\"))\n)"
  },
  {
    "objectID": "data_cleaning.html#clean-the-columns",
    "href": "data_cleaning.html#clean-the-columns",
    "title": "Data Cleaning & Exploration",
    "section": "",
    "text": "Cleans up multiple text columns in the DataFrame by extracting and formatting the content originally enclosed in double quotes. Columns to clean contain those string values often wrapped in brackets, double quotes, or cluttered with newlines and extra spaces. For each of these columns, using regular expressions to remove square brackets, line breaks, and excess whitespace, formats comma-separated items with a proper space after each comma, and removes all double quotes, resulting in cleaner, more readable text entries across the specified columns.\n\n\nCode\n# 2. Remove square brackets, line breaks, spaces, and replace the formatting between commas with “,”, then remove the double quotes\n\nfrom pyspark.sql.functions import regexp_replace, col\n\ncolumns_to_clean = [\"SOURCE_TYPES\", \"SOURCES\", \"URL\", \"EDUCATION_LEVELS_NAME\", \"SKILLS\", \n                    \"SKILLS_NAME\", \"SPECIALIZED_SKILLS\", \"SPECIALIZED_SKILLS_NAME\", \"CERTIFICATIONS\", \n                    \"CERTIFICATIONS_NAME\", \"COMMON_SKILLS\", \"COMMON_SKILLS_NAME\", \"SOFTWARE_SKILLS\", \n                    \"SOFTWARE_SKILLS_NAME\", \"CIP6\", \"CIP6_NAME\", \"CIP4\", \"CIP4_NAME\", \"CIP2\", \n                    \"CIP2_NAME\", \"LIGHTCAST_SECTORS\", \"LIGHTCAST_SECTORS_NAME\"]  \n\nfor col_name in columns_to_clean:\n    df = df.withColumn(col_name, \n                       regexp_replace(regexp_replace(regexp_replace(col(col_name), r'[\\[\\]\\n\\s]+', ''), r'\",\"', '\", '), r'\"', ''))"
  },
  {
    "objectID": "data_cleaning.html#clean-the-education-level-column",
    "href": "data_cleaning.html#clean-the-education-level-column",
    "title": "Data Cleaning & Exploration",
    "section": "",
    "text": "Cleans the EDUCATION_LEVELS column by extracting and retaining only the numeric portion of each entry. Removing surrounding text or symbols, leaving just the numeric education level in the column. This makes the data more consistent and easier to work with for analysis or modeling purposes.\n\n\nCode\n# 3.EDUCATION_LEVELS only keeps digits\nfrom pyspark.sql.functions import regexp_extract\n\ndf = df.withColumn(\"EDUCATION_LEVELS\", regexp_extract(\"EDUCATION_LEVELS\", r'(\\d+)', 1))"
  },
  {
    "objectID": "data_cleaning.html#clean-the-location-column",
    "href": "data_cleaning.html#clean-the-location-column",
    "title": "Data Cleaning & Exploration",
    "section": "",
    "text": "Cleans the LOCATION column, ensures that all location information appears on one line, and removes curly braces, resulting a cleaner, more uniform LOCATION column for reading and analyzing\n\n\nCode\n# 4. LOCATION only keeps data\nfrom pyspark.sql.functions import col, regexp_replace\n\ndf = df.withColumn(\"LOCATION\", \n                           regexp_replace(regexp_replace(col(\"LOCATION\"), r\"\\s*\\n\\s*\", \" \"), r\"[{}]\", \"\"))"
  },
  {
    "objectID": "data_cleaning.html#update-modeled-duration",
    "href": "data_cleaning.html#update-modeled-duration",
    "title": "Data Cleaning & Exploration",
    "section": "",
    "text": "Similarly as in updating duration, fills in the value with the number of days between MODELED_EXPIRED and POSTED, helps standardize and complete the duration data for modeled job postings\n\n\nCode\n# 5.MODELED_DURATION = MODELED_EXPIRED - POSTED\n\nspark.conf.set(\"spark.sql.legacy.timeParserPolicy\", \"LEGACY\")\n\nfrom pyspark.sql.functions import datediff, when, to_date, col\n\ndf = df.withColumn(\"MODELED_EXPIRED\", to_date(\"MODELED_EXPIRED\", \"MM/dd/yyyy\"))\n\ndf = df.withColumn(\n    \"MODELED_DURATION\",\n    when(col(\"MODELED_DURATION\").isNull(), datediff(\"MODELED_EXPIRED\", \"POSTED\"))\n    .otherwise(col(\"MODELED_DURATION\"))\n)"
  },
  {
    "objectID": "data_cleaning.html#standardize-remote-work-types",
    "href": "data_cleaning.html#standardize-remote-work-types",
    "title": "Data Cleaning & Exploration",
    "section": "",
    "text": "Standardizes the values in the REMOTE_TYPE_NAME column to ensure consistency in describing remote work types. Replaces values None and Not Remote with On-Site, changes Hybrid Remote to Hybrid, and keeps Remote as is. Simplify and unify the classification of job postings based on work location\n\n\nCode\n# 6. Standardize Remote Work Types\nfrom pyspark.sql.functions import when, col\n\ndf = df.withColumn(\n    \"REMOTE_TYPE_NAME\",\n    when(col(\"REMOTE_TYPE_NAME\") == \"[None]\", \"On-Site\")\n    .when(col(\"REMOTE_TYPE_NAME\") == \"Not Remote\", \"On-Site\")\n    .when(col(\"REMOTE_TYPE_NAME\") == \"Hybrid Remote\", \"Hybrid\")\n    .when(col(\"REMOTE_TYPE_NAME\") == \"Remote\", \"Remote\")\n    .otherwise(col(\"REMOTE_TYPE_NAME\"))\n)"
  },
  {
    "objectID": "data_cleaning.html#reason-of-not-filling-nas-this-time",
    "href": "data_cleaning.html#reason-of-not-filling-nas-this-time",
    "title": "Data Cleaning & Exploration",
    "section": "",
    "text": "Although filling missing values is a common data cleaning strategy, we chose not to do it in this case to preserve the integrity and accuracy of the original dataset. Imputing numerical fields like salary with the median could distort salary distributions and mask meaningful patterns or outliers. Similarly, replacing missing categorical fields with “Unknown” may introduce noise and reduce the reliability of downstream analysis, especially in modeling or clustering tasks. Additionally, dropping columns with over 50% missing data might lead to the loss of potentially valuable or unique information. By keeping the missing values intact, we allow for more transparent analysis and leave room for context-aware handling in specific use cases."
  },
  {
    "objectID": "data_cleaning.html#reason-of-not-dropping-unnecessary-columns",
    "href": "data_cleaning.html#reason-of-not-dropping-unnecessary-columns",
    "title": "Data Cleaning & Exploration",
    "section": "",
    "text": "The dataset is overly complex, with more than 100 different variables and columns. Therefore, we have taken the approach of directly extracting a specific column or columns of the data to be analyzed to generate a dataframe and analyze it. This way we don’t need to remove unwanted columns."
  },
  {
    "objectID": "data_cleaning.html#save-the-cleaned-data",
    "href": "data_cleaning.html#save-the-cleaned-data",
    "title": "Data Cleaning & Exploration",
    "section": "",
    "text": "Code\n# save data\n# 1. use coalesce(1) to merge all partitions into one file\ndf.coalesce(1).write.option(\"header\", \"true\").csv(\"data/lightcast_cleaned_temp\")\n\n# 2. Find and rename the generated files\nimport os\nimport shutil\n\n# get path\ngenerated_file_path = 'data/lightcast_cleaned_temp'\n\nfor filename in os.listdir(generated_file_path):\n    if filename.startswith('part-'):  # find file\n        # rename and move\n        shutil.move(os.path.join(generated_file_path, filename), 'data/lightcast_cleaned.csv')\n\n# delete useless folder\nshutil.rmtree(generated_file_path)"
  }
]