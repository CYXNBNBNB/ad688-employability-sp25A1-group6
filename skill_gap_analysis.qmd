---
title: "Skill Gap Analysis"
date-modified: today
date-format: long

#bibliography: references_analysis.bib
csl: csl/econometrica.csl
#nocite: '@*'  #show all references
format: 
  html:
    toc: true
    number-sections: true
    df-print: paged
    code-fold: true

execute:
  eval: false #false 不运行  true 运行
  echo: true  #显示代码

---
```{python}
import pandas as pd
import plotly.express as px
import plotly.io as pio
pio.renderers.default = "vscode"
from pyspark.sql import SparkSession
from pyspark.sql.functions import split, explode, col, regexp_replace, transform, isnan

spark = SparkSession.builder.appName("LightcastCleanedData").getOrCreate()

# reload cleaned data
df_cleaned = spark.read.option("header", "true").option("inferSchema", "true").option("multiLine","true").csv("data/lightcast_cleaned.csv")

# show dataset
df_cleaned.show()
```


## Creating a team-based skills data framework

We take a column of software skill names from the cleaned dataset, splits each entry, cleans up the text, and counts how often each skill appears. Then, we grabs the top 30 most frequent skills,  and puts them into a tidy table using pandas to make it easier to view.

```{python}
from collections import Counter
import pandas as pd

# 1. Extracting data with .collect()
skills_rows = df_cleaned.select("SOFTWARE_SKILLS_NAME").dropna().collect()

# 2. Split each line of string into a list of skills and expand the statistics
all_skills = []
for row in skills_rows:
    skills = row["SOFTWARE_SKILLS_NAME"] 
    if isinstance(skills, str):  
        skill_list = [s.strip() for s in skills.split(",")]  # Split and remove spaces
        all_skills.extend(skill_list)

# 3. Counting word frequency
skill_counts = Counter(all_skills)
top_skills = skill_counts.most_common(30) 

# 4. Change to dataframe and show
df_skill_counts = pd.DataFrame(top_skills, columns=["Skill", "Frequency"])
#print(df_skill_counts)
```

We build a table showing the skill levels of our team members across various tools like SQL, Excel, Python, and others. Then we create a heatmap to visually highlight each person's strengths and weaknesses, making it easy to compare skill levels across the team. 

```{python}
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# 1. Construct team skill level data
skills_data = {
    "Name": ["Yuxuan Chen", "Shangxuan Zhong", "Qimin Shen", "Altyn Baigaliyeva"],
    "SQL": [5, 3, 4, 2],
    "Excel": [4, 2, 5, 3],
    "Python": [3, 1, 4, 2],
    "SAP Applications": [2, 2, 3, 1],
    "Dashboard": [2, 2, 3, 1],
    "Tableau": [2, 2, 3, 1],
    "PowerBI": [2, 2, 3, 1],
    "PowerPoint": [2, 2, 3, 1],
    "R": [2, 2, 3, 1],
    "Azure": [2, 2, 3, 1],
    "Amazon Web Services": [2, 2, 3, 1]
}

# 2. Create dataframe and set Name as index
df_skills = pd.DataFrame(skills_data)
df_skills.set_index("Name", inplace=True)

# 3. Demonstrate the skill level chart
print("Team Skill Rating Scale:")
display(df_skills) 

# 4. Visualize the skills gap by heat map
plt.figure(figsize=(8, 6))
sns.heatmap(df_skills, annot=True, cmap="coolwarm", linewidths=0.5, cbar_kws={'label': 'Skill Level'})
plt.title("Team Skill Levels Heatmap")
plt.xticks(rotation=45)  
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()
```



## 将团队技能与行业要求进行比较
```{python}
from pyspark.sql.functions import col, when

# 创建新列 EDU_MATCH，标记是否匹配
df_compare = df_cleaned.withColumn(
    "EDU_MATCH",
    when(col("MIN_EDULEVELS") == col("EDUCATION_LEVELS"), "Match").otherwise("Mismatch")
)

df_compare.select("MIN_EDULEVELS", "EDUCATION_LEVELS", "EDU_MATCH").show(truncate=False)

# 统计不匹配的行数
unmatched_count = df_cleaned.filter(col("MIN_EDULEVELS") != col("EDUCATION_LEVELS")).count()
print(f"Not Match：{unmatched_count}")

# 说明EDUCATION_LEVELS和MIN_EDULEVELS一样

```


对每个工作的包含的每个software skills name打分
```{python}
from pyspark.sql.functions import when, lit, col, trim
#打分表
job_expectation = df_cleaned.select(
    col("MIN_EDULEVELS").alias("EDU_LEVEL"),
    col("MIN_EDULEVELS_NAME").alias("EDU_LEVELS_NAME")
).distinct().orderBy(col("EDU_LEVEL").asc())

job_expectation = job_expectation.withColumn(
    "SCORE",
    when(col("EDU_LEVEL") == 4, lit(5)) # Ph.D. or professional degree
    .when(col("EDU_LEVEL") == 3, lit(4)) # Master's degree
    .when(col("EDU_LEVEL") == 2, lit(3)) # Bachelor's degree 
    .when(col("EDU_LEVEL") == 1, lit(2)) # Associate degree
    .when(col("EDU_LEVEL") == 0, lit(1)) # High school or GED
    .when(col("EDU_LEVEL") == 99, lit(0)) # No Education Listed
)

job_expectation.show(truncate=False)

```

```{python}
from pyspark.sql.functions import count, row_number
from pyspark.sql.window import Window

# Step 1: 原始操作（你已完成）
df_with_score = df_cleaned.join(
    job_expectation.select("EDU_LEVEL", "SCORE"),
    df_cleaned["MIN_EDULEVELS"] == job_expectation["EDU_LEVEL"],
    how="left"
)
df_with_skills = df_with_score.withColumn("Skill", split(col("SOFTWARE_SKILLS_NAME"), ","))
df_exploded = df_with_skills.select(explode("Skill").alias("Skill"), col("SCORE"))
df_exploded = df_exploded.withColumn("Skill", trim(col("Skill")))

# Step 2: 按 Skill 和 SCORE 统计频次
skill_score_counts = df_exploded.groupBy("Skill", "SCORE").agg(count("*").alias("count"))

# Step 3: 使用窗口函数找出每个技能最常见的得分等级
window_spec = Window.partitionBy("Skill").orderBy(col("count").desc())

skill_most_common_score = skill_score_counts.withColumn("rank", row_number().over(window_spec)) \
                                            .filter(col("rank") == 1) \
                                            .select("Skill", "SCORE", "count") \
                                            .orderBy(col("SCORE").desc())

from pyspark.sql.functions import col, count, lit, greatest, when

# 假设你已经得到了 skill_score_counts 表（Skill + SCORE + count）

# Step 1: pivot 展开为列
skill_score_pivot = skill_score_counts.groupBy("Skill") \
    .pivot("SCORE", [5, 4, 3, 2, 1, 0]) \
    .agg(count("count")) \
    .na.fill(0)  # 把 null 填成 0，表示没有出现过

# Step 2: 添加 Most_Common_SCORE 列，找出最大频次对应的 SCORE
skill_score_labeled = skill_score_pivot.withColumn(
    "Most_Common_SCORE",
    when(greatest(col("5"), col("4"), col("3"), col("2"), col("1"), col("0")) == col("5"), lit(5))
    .when(greatest(col("5"), col("4"), col("3"), col("2"), col("1"), col("0")) == col("4"), lit(4))
    .when(greatest(col("5"), col("4"), col("3"), col("2"), col("1"), col("0")) == col("3"), lit(3))
    .when(greatest(col("5"), col("4"), col("3"), col("2"), col("1"), col("0")) == col("2"), lit(2))
    .when(greatest(col("5"), col("4"), col("3"), col("2"), col("1"), col("0")) == col("1"), lit(1))
    .when(greatest(col("5"), col("4"), col("3"), col("2"), col("1"), col("0")) == col("0"), lit(0))
)

# Step 3: 显示最终结果
skill_score_labeled.orderBy("Most_Common_SCORE", ascending=False).show(truncate=False)


```

```{python}
from pyspark.sql.window import Window
from pyspark.sql.functions import ntile

# 定义窗口：按照 Total_Score 降序排列
windowSpec = Window.orderBy(col("Total_Score").desc())

# 使用 ntile(5) 划分成五个等级，从1到5，再转换成 5 到 1
skill_score_with_level = skill_score_summary.withColumn("Score_Level", 6 - ntile(5).over(windowSpec))

# 查看结果
# skill_score_with_level.show(truncate=False)
```

```{python}
# 先定义目标技能列表
target_skills = [
    "SQL(ProgrammingLanguage)", "MicrosoftExcel", "Python(ProgrammingLanguage)", "SAPApplications",
    "Dashboard", "Tableau(BusinessIntelligenceSoftware)", "PowerBI", "MicrosoftPowerPoint",
    "R(ProgrammingLanguage)", "MicrosoftAzure", "AmazonWebServices"
]

# 筛选技能行
selected_skill_levels = skill_score_with_level.filter(col("Skill").isin(target_skills))

# 显示结果
selected_skill_levels.select("Skill", "Score_Level").show(truncate=False)

```

```{python}

selected_skill_levels.show(truncate=False)

```